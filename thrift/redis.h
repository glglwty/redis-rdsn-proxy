/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef redis_H
#define redis_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "redis_types.h"

namespace redisproxy {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class redisIf {
 public:
  virtual ~redisIf() {}
  virtual void write(std::string& _return, const std::string& command) = 0;
  virtual void read(std::string& _return, const std::string& command) = 0;
};

class redisIfFactory {
 public:
  typedef redisIf Handler;

  virtual ~redisIfFactory() {}

  virtual redisIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(redisIf* /* handler */) = 0;
};

class redisIfSingletonFactory : virtual public redisIfFactory {
 public:
  redisIfSingletonFactory(const boost::shared_ptr<redisIf>& iface) : iface_(iface) {}
  virtual ~redisIfSingletonFactory() {}

  virtual redisIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(redisIf* /* handler */) {}

 protected:
  boost::shared_ptr<redisIf> iface_;
};

class redisNull : virtual public redisIf {
 public:
  virtual ~redisNull() {}
  void write(std::string& /* _return */, const std::string& /* command */) {
    return;
  }
  void read(std::string& /* _return */, const std::string& /* command */) {
    return;
  }
};

typedef struct _redis_write_args__isset {
  _redis_write_args__isset() : command(false) {}
  bool command :1;
} _redis_write_args__isset;

class redis_write_args {
 public:

  redis_write_args() : command() {
  }

  virtual ~redis_write_args() throw();
  std::string command;

  _redis_write_args__isset __isset;

  void __set_command(const std::string& val);

  bool operator == (const redis_write_args & rhs) const
  {
    if (!(command == rhs.command))
      return false;
    return true;
  }
  bool operator != (const redis_write_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const redis_write_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class redis_write_pargs {
 public:


  virtual ~redis_write_pargs() throw();
  const std::string* command;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _redis_write_result__isset {
  _redis_write_result__isset() : success(false) {}
  bool success :1;
} _redis_write_result__isset;

class redis_write_result {
 public:

  redis_write_result() : success() {
  }

  virtual ~redis_write_result() throw();
  std::string success;

  _redis_write_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const redis_write_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const redis_write_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const redis_write_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _redis_write_presult__isset {
  _redis_write_presult__isset() : success(false) {}
  bool success :1;
} _redis_write_presult__isset;

class redis_write_presult {
 public:


  virtual ~redis_write_presult() throw();
  std::string* success;

  _redis_write_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _redis_read_args__isset {
  _redis_read_args__isset() : command(false) {}
  bool command :1;
} _redis_read_args__isset;

class redis_read_args {
 public:

  redis_read_args() : command() {
  }

  virtual ~redis_read_args() throw();
  std::string command;

  _redis_read_args__isset __isset;

  void __set_command(const std::string& val);

  bool operator == (const redis_read_args & rhs) const
  {
    if (!(command == rhs.command))
      return false;
    return true;
  }
  bool operator != (const redis_read_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const redis_read_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class redis_read_pargs {
 public:


  virtual ~redis_read_pargs() throw();
  const std::string* command;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _redis_read_result__isset {
  _redis_read_result__isset() : success(false) {}
  bool success :1;
} _redis_read_result__isset;

class redis_read_result {
 public:

  redis_read_result() : success() {
  }

  virtual ~redis_read_result() throw();
  std::string success;

  _redis_read_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const redis_read_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const redis_read_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const redis_read_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _redis_read_presult__isset {
  _redis_read_presult__isset() : success(false) {}
  bool success :1;
} _redis_read_presult__isset;

class redis_read_presult {
 public:


  virtual ~redis_read_presult() throw();
  std::string* success;

  _redis_read_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class redisClient : virtual public redisIf {
 public:
  redisClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  redisClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void write(std::string& _return, const std::string& command);
  void send_write(const std::string& command);
  void recv_write(std::string& _return);
  void read(std::string& _return, const std::string& command);
  void send_read(const std::string& command);
  void recv_read(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class redisProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<redisIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (redisProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_write(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_read(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  redisProcessor(boost::shared_ptr<redisIf> iface) :
    iface_(iface) {
    processMap_["write"] = &redisProcessor::process_write;
    processMap_["read"] = &redisProcessor::process_read;
  }

  virtual ~redisProcessor() {}
};

class redisProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  redisProcessorFactory(const ::boost::shared_ptr< redisIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< redisIfFactory > handlerFactory_;
};

class redisMultiface : virtual public redisIf {
 public:
  redisMultiface(std::vector<boost::shared_ptr<redisIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~redisMultiface() {}
 protected:
  std::vector<boost::shared_ptr<redisIf> > ifaces_;
  redisMultiface() {}
  void add(boost::shared_ptr<redisIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void write(std::string& _return, const std::string& command) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->write(_return, command);
    }
    ifaces_[i]->write(_return, command);
    return;
  }

  void read(std::string& _return, const std::string& command) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->read(_return, command);
    }
    ifaces_[i]->read(_return, command);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class redisConcurrentClient : virtual public redisIf {
 public:
  redisConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  redisConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void write(std::string& _return, const std::string& command);
  int32_t send_write(const std::string& command);
  void recv_write(std::string& _return, const int32_t seqid);
  void read(std::string& _return, const std::string& command);
  int32_t send_read(const std::string& command);
  void recv_read(std::string& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
